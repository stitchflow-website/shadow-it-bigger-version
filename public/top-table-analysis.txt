"use client"

import { useState, useCallback, useMemo } from "react"
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from "@/components/ui/table"
import { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from "@/components/ui/dropdown-menu"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { ChevronDown, Check, ChevronUp, Upload, X } from "lucide-react"

interface DataTableProps {
  title?: string
  initialData?: Record<string, any>[]
  onDataChange?: (data: Record<string, any>[]) => void
  highlightTopRows?: number
  highlightColor?: string
  className?: string
}

export function ReusableDataTable({
  title = "Data Table",
  initialData = [],
  onDataChange,
  highlightTopRows = 0,
  highlightColor = "#E0D5C8",
  className = ""
}: DataTableProps) {
  const [data, setData] = useState<Record<string, any>[]>(initialData)
  const [sortKey, setSortKey] = useState<string>("")
  const [sortDirection, setSortDirection] = useState<"asc" | "desc">("desc")
  const [fileName, setFileName] = useState<string>("")

  // Parse CSV content
  const parseCSV = (csvText: string): Record<string, any>[] => {
    const lines = csvText.trim().split('\n')
    if (lines.length < 2) return []

    const headers = lines[0].split(',').map(h => h.trim().replace(/"/g, ''))
    const rows = lines.slice(1).map(line => {
      const values = line.split(',').map(v => v.trim().replace(/"/g, ''))
      const row: Record<string, any> = {}
      
      headers.forEach((header, index) => {
        const value = values[index] || ''
        // Try to convert to number if possible
        const numValue = Number(value)
        row[header] = !isNaN(numValue) && value !== '' ? numValue : value
      })
      
      return row
    })

    return rows
  }

  // Handle file upload
  const handleFileUpload = useCallback((event: React.ChangeEvent<HTMLInputElement>) => {
    const file = event.target.files?.[0]
    if (!file) return

    setFileName(file.name)
    const reader = new FileReader()
    reader.onload = (e) => {
      const csvText = e.target?.result as string
      const parsedData = parseCSV(csvText)
      setData(parsedData)
      onDataChange?.(parsedData)
      setSortKey("") // Reset sorting when new data is loaded
    }
    reader.readAsText(file)
  }, [onDataChange])

  // Clear data
  const clearData = () => {
    setData([])
    setFileName("")
    setSortKey("")
    onDataChange?.([])
  }

  // Get columns from data
  const columns = useMemo(() => {
    if (data.length === 0) return []
    return Object.keys(data[0])
  }, [data])

  // Determine if a column is sortable (contains numbers)
  const getSortableColumns = useMemo(() => {
    if (data.length === 0) return new Set<string>()
    
    const sortableColumns = new Set<string>()
    columns.forEach(column => {
      const hasNumbers = data.some(row => typeof row[column] === 'number')
      if (hasNumbers) {
        sortableColumns.add(column)
      }
    })
    return sortableColumns
  }, [data, columns])

  // Sort data
  const sortedData = useMemo(() => {
    if (!sortKey || data.length === 0) return data

    return [...data].sort((a, b) => {
      const valueA = a[sortKey]
      const valueB = b[sortKey]
      
      // Handle different data types
      if (typeof valueA === 'number' && typeof valueB === 'number') {
        return sortDirection === "asc" ? valueA - valueB : valueB - valueA
      }
      
      // String comparison
      const stringA = String(valueA).toLowerCase()
      const stringB = String(valueB).toLowerCase()
      
      if (sortDirection === "asc") {
        return stringA.localeCompare(stringB)
      } else {
        return stringB.localeCompare(stringA)
      }
    })
  }, [data, sortKey, sortDirection])

  // Handle sorting
  const handleSort = (key: string) => {
    if (sortKey === key) {
      setSortDirection(sortDirection === "asc" ? "desc" : "asc")
    } else {
      setSortKey(key)
      setSortDirection("desc")
    }
  }

  // Render sortable header
  const getSortableHeader = (label: string, key: string, className: string = "") => {
    const isActive = sortKey === key
    
    return (
      <TableHead 
        className={`cursor-pointer select-none hover:bg-gray-50 transition-colors ${className}`}
        onClick={() => handleSort(key)}
      >
        <div className="flex items-center gap-1">
          <span className="text-xs font-medium text-gray-600 uppercase tracking-wide">
            {label}
          </span>
          <div className="flex flex-col">
            <ChevronUp 
              className={`h-3 w-3 ${
                isActive && sortDirection === 'asc' 
                  ? 'text-gray-700' 
                  : 'text-gray-300'
              }`} 
            />
            <ChevronDown 
              className={`h-3 w-3 -mt-1 ${
                isActive && sortDirection === 'desc' 
                  ? 'text-gray-700' 
                  : 'text-gray-300'
              }`} 
            />
          </div>
        </div>
      </TableHead>
    )
  }

  // Render non-sortable header
  const getNonSortableHeader = (label: string, className: string = "") => {
    return (
      <TableHead className={className}>
        <span className="text-xs font-medium text-gray-600 uppercase tracking-wide">
          {label}
        </span>
      </TableHead>
    )
  }

  // Format cell value for display
  const formatCellValue = (value: any): string => {
    if (typeof value === 'number') {
      // Format numbers with appropriate decimal places
      return value % 1 === 0 ? value.toString() : value.toFixed(1)
    }
    return String(value)
  }

  return (
    <div className={`space-y-4 bg-white p-6 ${className}`}>
      {/* Header */}
      <div className="flex items-center justify-between mb-6">
        <h1 className="text-3xl font-medium text-gray-900">{title}</h1>
        <div className="flex items-center gap-4">
          {fileName && (
            <div className="flex items-center gap-2 text-sm text-gray-600 bg-gray-100 px-3 py-1 rounded">
              <span>{fileName}</span>
              <Button
                variant="ghost"
                size="sm"
                onClick={clearData}
                className="h-5 w-5 p-0 hover:bg-gray-200"
              >
                <X className="h-3 w-3" />
              </Button>
            </div>
          )}
          <div className="relative">
            <Input
              type="file"
              accept=".csv"
              onChange={handleFileUpload}
              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            />
            <Button variant="outline" className="flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Upload CSV
            </Button>
          </div>
        </div>
      </div>

      {/* Data count and sort info */}
      {data.length > 0 && (
        <div className="flex items-center justify-between text-sm text-gray-600">
          <span>{data.length} records loaded</span>
          {sortKey && (
            <span>
              Sorted by {sortKey} ({sortDirection === 'asc' ? 'ascending' : 'descending'})
            </span>
          )}
        </div>
      )}

      {/* Highlight legend */}
      {highlightTopRows > 0 && data.length > 0 && (
        <div className="flex items-center py-3 px-4 bg-gray-50 rounded-lg border border-gray-200">
          <div className="flex items-center gap-2">
            <div 
              className="w-3 h-3 rounded-full border border-gray-300" 
              style={{ backgroundColor: highlightColor }}
            ></div>
            <span className="text-sm text-gray-600">Top {highlightTopRows} rows highlighted</span>
          </div>
        </div>
      )}

      {/* Table */}
      {data.length > 0 ? (
        <div className="bg-white rounded-lg border border-gray-200 overflow-hidden">
          <div className="overflow-x-auto">
            <Table>
              <TableHeader>
                <TableRow className="border-b border-gray-200 bg-gray-50">
                  {columns.map((column) => {
                    const isSortable = getSortableColumns.has(column)
                    const className = "py-3 px-6"
                    
                    return isSortable
                      ? getSortableHeader(column, column, className)
                      : getNonSortableHeader(column, className)
                  })}
                </TableRow>
              </TableHeader>
              <TableBody>
                {sortedData.map((row, index) => (
                  <TableRow
                    key={index}
                    className="hover:bg-gray-50 border-b border-gray-100"
                    style={
                      highlightTopRows > 0 && index < highlightTopRows
                        ? { backgroundColor: highlightColor }
                        : {}
                    }
                  >
                    {columns.map((column) => {
                      const value = row[column]
                      const isNumeric = typeof value === 'number'
                      
                      return (
                        <TableCell
                          key={column}
                          className={`py-4 px-6 ${
                            isNumeric 
                              ? 'text-right font-medium text-gray-900' 
                              : 'text-left text-gray-700'
                          }`}
                        >
                          {formatCellValue(value)}
                        </TableCell>
                      )
                    })}
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </div>
        </div>
      ) : (
        <div className="text-center py-12 bg-gray-50 rounded-lg border border-gray-200">
          <Upload className="mx-auto h-12 w-12 text-gray-400 mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No data loaded</h3>
          <p className="text-gray-500 mb-4">Upload a CSV file to get started</p>
          <div className="relative inline-block">
            <Input
              type="file"
              accept=".csv"
              onChange={handleFileUpload}
              className="absolute inset-0 w-full h-full opacity-0 cursor-pointer"
            />
            <Button className="flex items-center gap-2">
              <Upload className="h-4 w-4" />
              Choose CSV File
            </Button>
          </div>
        </div>
      )}
    </div>
  )
}

// Example usage component
export function ExampleUsage() {
  const [tableData, setTableData] = useState<Record<string, any>[]>([])

  return (
    <ReusableDataTable
      title="My Data Analysis"
      initialData={tableData}
      onDataChange={setTableData}
      highlightTopRows={5}
      highlightColor="#E0D5C8"
      className="max-w-7xl mx-auto"
    />
  )
}




// Basic usage
<ReusableDataTable 
  title="Sales Data Analysis"
  highlightTopRows={5}
  highlightColor="#E0D5C8"
/>

// With callbacks and initial data
<ReusableDataTable
  title="Customer Analytics"
  initialData={myData}
  onDataChange={(data) => console.log('Data updated:', data)}
  highlightTopRows={3}
  className="max-w-6xl mx-auto"
/>


interface DataTableProps {
  title?: string                          // Table title
  initialData?: Record<string, any>[]     // Pre-loaded data
  onDataChange?: (data: any[]) => void    // Callback when data changes
  highlightTopRows?: number               // Number of top rows to highlight
  highlightColor?: string                 // Highlight color
  className?: string                      // Additional CSS classes
}

